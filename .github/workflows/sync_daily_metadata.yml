permissions:
  contents: write

name: Daily Company Metadata Sync

on:
  schedule:
    - cron: '0 5 * * *'   # 05:00 UTC daily
  workflow_dispatch: {}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Ensure LFS blobs present
        run: |
          git lfs install
          git lfs pull

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas aiohttp httpx

      - name: Prepare metadata DB (recreate if invalid)
        run: |
          mkdir -p data
          if [ -f data/company_metadata.sqlite ]; then
            python - << 'PY'
import sqlite3, os
try:
    con = sqlite3.connect("data/company_metadata.sqlite")
    con.execute("PRAGMA user_version;")
    con.close()
    print("DB looks valid.")
except Exception as e:
    print("DB invalid, deleting:", e)
    os.remove("data/company_metadata.sqlite")
PY
          fi

      - name: Upsert company_numbers into metadata DB (from yearly_sqlites)
        run: |
          python scripts/update_company_numbers_sqlite.py \
            --inputs yearly_sqlites \
            --db data/company_metadata.sqlite

      - name: Fetch/refresh company profiles (no CSV)
        env:
          CH_API_KEY: ${{ secrets.CH_API_KEY }}
        run: |
          python scripts/fetch_company_metadata.py \
            --api-key "$CH_API_KEY" \
            --db data/company_metadata.sqlite \
            --concurrency 8 \
            --timeout 20 \
            --since-days 30

      - name: Pull latest (avoid non-fast-forward)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }} --rebase || true

      - name: Commit & push updated metadata DB
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git add data/company_metadata.sqlite
          git commit -m "Daily metadata sync (DB-only)" || echo "No changes to commit"
          git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
