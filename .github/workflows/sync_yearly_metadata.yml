name: Sync Yearly Company Metadata

on:
  workflow_dispatch:
    inputs:
      MAX_PER_RUN:
        description: "Limit how many new/stale companies to fetch this run (blank = unlimited)"
        required: false
        default: ""
      SINCE_DAYS:
        description: "Refresh rows older than N days (blank = only missing)"
        required: false
        default: ""
  schedule:
    - cron: "20 1 * * *"   # daily 01:20 UTC

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      CH_API_KEY: ${{ secrets.CH_API_KEY }}

    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Ensure LFS blobs present (yearly_sqlites/*.sqlite)
        run: |
          git lfs install
          git lfs pull

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp

      - name: Run bulk metadata sync from yearly_sqlites (no CSV)
        env:
          MAX_PER_RUN: ${{ github.event.inputs.MAX_PER_RUN }}
          SINCE_DAYS: ${{ github.event.inputs.SINCE_DAYS }}
        shell: bash
        run: |
          mkdir -p data
          # Ensure metadata DB is a real SQLite file (not an LFS pointer)
          python - <<'PY'
import sqlite3, os
p = "data/company_metadata.sqlite"
if os.path.exists(p):
    try:
        con = sqlite3.connect(p)
        con.execute("PRAGMA user_version;").fetchall()
        con.close()
        print("metadata DB looks valid")
    except Exception as e:
        print("metadata DB invalid, deleting:", e)
        os.remove(p)
PY

          EXTRA_FLAGS=""
          if [ -n "$MAX_PER_RUN" ]; then EXTRA_FLAGS="$EXTRA_FLAGS --max-per-run $MAX_PER_RUN"; fi
          if [ -n "$SINCE_DAYS" ]; then EXTRA_FLAGS="$EXTRA_FLAGS --since-days $SINCE_DAYS"; fi

          python sync_yearly_company_metadata.py \
            --input-dir yearly_sqlites \
            --table financials \
            --db data/company_metadata.sqlite \
            $EXTRA_FLAGS

      - name: Pull latest to avoid non-fast-forward
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.ref_name }}
          git pull --rebase origin ${{ github.ref_name }} || true

      - name: Commit & push updated metadata DB
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git add data/company_metadata.sqlite
          git commit -m "Auto-update yearly company metadata (no CSV)" || echo "No changes"
          git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
