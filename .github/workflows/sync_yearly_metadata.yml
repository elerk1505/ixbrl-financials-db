name: Bulk Yearly Company Metadata Sync → Azure

on:
  workflow_dispatch:
    inputs:
      MAX_PER_RUN:
        description: "Max rows this run (blank = unlimited)"
        required: false
        default: ""
      SINCE_DAYS:
        description: "Refresh rows older than N days"
        required: false
        default: ""
      FORCE_REFETCH:
        description: "Set 1 to refetch all"
        required: false
        default: "0"

permissions:
  contents: read

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    env:
      CH_API_KEY:         ${{ secrets.CH_API_KEY }}
      AZURE_SQL_SERVER:   ${{ secrets.AZURE_SQL_SERVER }}        # e.g. myserver.database.windows.net
      AZURE_SQL_DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
      AZURE_SQL_USERNAME: ${{ secrets.AZURE_SQL_USERNAME }}      # consider user@myserver
      AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}
      # AZURE_SQL_CONN:   ${{ secrets.AZURE_SQL_CONN }}          # ← keep removed
      CONCURRENCY: "8"
      TIMEOUT: "20"
      MAX_PER_RUN:  ${{ github.event.inputs.MAX_PER_RUN }}
      SINCE_DAYS:   ${{ github.event.inputs.SINCE_DAYS }}
      FORCE_REFETCH:  ${{ github.event.inputs.FORCE_REFETCH }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # Login to Azure
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create temporary firewall rule for this runner IP
      - name: Allow runner IP in Azure SQL firewall
        env:
          AZ_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZ_RG:           ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZ_SQL_NAME:     ${{ secrets.AZURE_SQL_SERVER_NAME }}   # e.g. myserver
        run: |
          set -e
          az account set --subscription "$AZ_SUBSCRIPTION"
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Runner public IP: $RUNNER_IP"
          RULE_NAME="gha-${{ github.run_id }}"
          az sql server firewall-rule create \
            --resource-group "$AZ_RG" \
            --server "$AZ_SQL_NAME" \
            --name "$RULE_NAME" \
            --start-ip-address "$RUNNER_IP" \
            --end-ip-address "$RUNNER_IP"
          echo "FW_RULE_NAME=$RULE_NAME" >> $GITHUB_ENV

      - name: ODBC + deps
        run: |
          sudo su -c 'curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -'
          sudo su -c 'curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list > /etc/apt/sources.list.d/mssql-release.list'
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python - << 'PY'
import pyodbc
print("Available ODBC drivers:", pyodbc.drivers())
PY

      # (Optional) sanity check connectivity before running your script
      - name: Connectivity check
        run: |
          python - << 'PY'
import os, urllib.parse, pyodbc
server   = os.getenv("AZURE_SQL_SERVER")
database = os.getenv("AZURE_SQL_DATABASE")
username = os.getenv("AZURE_SQL_USERNAME")
password = os.getenv("AZURE_SQL_PASSWORD")
conn_str = (
    f"Driver=ODBC Driver 18 for SQL Server;"
    f"Server=tcp:{server},1433;"
    f"Database={database};"
    f"Uid={username};"
    f"Pwd={password};"
    "Encrypt=yes;TrustServerCertificate=no;Connection Timeout=60;"
)
print("Attempting test connection...")
with pyodbc.connect(conn_str) as conn:
    cur = conn.cursor()
    cur.execute("SELECT 1")
    print("Test query result:", cur.fetchone()[0])
print("Connectivity OK")
PY

      - name: Run bulk metadata sync
        run: python sync_yearly_company_metadata.py

      # Always clean up the firewall rule
      - name: Remove runner IP from firewall
        if: always()
        env:
          AZ_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZ_RG:           ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZ_SQL_NAME:     ${{ secrets.AZURE_SQL_SERVER_NAME }}
        run: |
          az account set --subscription "$AZ_SUBSCRIPTION"
          az sql server firewall-rule delete \
            --resource-group "$AZ_RG" \
            --server "$AZ_SQL_NAME" \
            --name "$FW_RULE_NAME" \
            --yes || true
