name: Monthly iXBRL Financials Ingest â†’ Azure SQL

on:
  workflow_dispatch:
    inputs:
      start_month:
        description: "Start month (YYYY-MM), inclusive. Example: 2023-01"
        required: false
        type: string
      end_month:
        description: "End month (YYYY-MM), inclusive. Example: 2023-06"
        required: false
        type: string
      months:
        description: "Comma-separated list of YYYY-MM (e.g. 2024-01,2024-02). Overrides since_months when set."
        required: false
        type: string
      since_months:
        description: "If no start/end and no months are given: ingest current month back N-1 months (default 1)."
        required: false
        default: "1"
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: monthly-ixbrl-to-azure
  cancel-in-progress: false

jobs:
  ingest-monthlies:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    env:
      # DB creds
      AZURE_SQL_SERVER:   ${{ secrets.AZURE_SQL_SERVER }}
      AZURE_SQL_DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
      AZURE_SQL_USERNAME: ${{ secrets.AZURE_SQL_USERNAME }}
      AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}
      AZURE_SQL_ODBC:     ${{ secrets.AZURE_SQL_ODBC }}
      # Azure CLI (firewall)
      AZ_SUBSCRIPTION:    ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZ_RG:              ${{ secrets.AZURE_RESOURCE_GROUP }}
      AZ_SQL_NAME:        ${{ secrets.AZURE_SQL_SERVER_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Allow runner IP in Azure SQL firewall
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "$AZ_SUBSCRIPTION"
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Runner public IP: $RUNNER_IP"
          RULE_NAME="gha-${{ github.run_id }}"
          az sql server firewall-rule create \
            --resource-group "$AZ_RG" \
            --server "$AZ_SQL_NAME" \
            --name "$RULE_NAME" \
            --start-ip-address "$RUNNER_IP" \
            --end-ip-address "$RUNNER_IP"
          echo "FW_RULE_NAME=$RULE_NAME" >> "$GITHUB_ENV"
          # give the firewall a moment to propagate
          sleep 8

      - name: Install system deps (ODBC)
        run: |
          # Use the Ubuntu 24.04 (noble) repo for msodbcsql18
          sudo su -c 'curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -'
          echo "deb [arch=amd64,arm64] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install httpx pandas stream-read-xbrl sqlalchemy pyodbc

      - name: Connectivity check (with retries)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, time, urllib.parse, pyodbc

          # Prefer a full ODBC string if provided
          odbc = os.getenv("AZURE_SQL_ODBC")
          if not odbc:
            server   = os.getenv("AZURE_SQL_SERVER")
            db       = os.getenv("AZURE_SQL_DATABASE")
            user     = os.getenv("AZURE_SQL_USERNAME")
            pwd      = os.getenv("AZURE_SQL_PASSWORD")
            odbc = (
              f"Driver=ODBC Driver 18 for SQL Server;"
              f"Server=tcp:{server},1433;"
              f"Database={db};Uid={user};Pwd={pwd};"
              "Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
            )

          tries = 6
          for i in range(1, tries+1):
            try:
              with pyodbc.connect(odbc) as c:
                cur = c.cursor()
                cur.execute("SELECT 1")
                print("Connectivity OK ->", cur.fetchone()[0])
                break
            except Exception as e:
              if i == tries:
                raise
              backoff = 2 ** i
              print(f"Connect attempt {i} failed: {e}. Retrying in {backoff}s...")
              time.sleep(backoff)
          PY

      - name: Run monthly ingest (range/list/lookback)
        shell: bash
        run: |
          set -euo pipefail
          ARGS=()

          # choose date mode
          if [[ -n "${{ inputs.start_month }}" && -n "${{ inputs.end_month }}" ]]; then
            ARGS+=( --start-month "${{ inputs.start_month }}" --end-month "${{ inputs.end_month }}" )
          elif [[ -n "${{ inputs.months }}" ]]; then
            ARGS+=( --months "${{ inputs.months }}" )
          else
            ARGS+=( --since-months "${{ inputs.since_months }}" )
          fi

          # connection: prefer ODBC secret
          if [[ -n "${AZURE_SQL_ODBC:-}" ]]; then
            ARGS+=( --odbc-connect "${AZURE_SQL_ODBC}" )
          fi

          # write directly to dbo.financials
          ARGS+=( --schema dbo --target-table financials )

          echo "python ingest_monthly_financials.py ${ARGS[*]}"
          python ingest_monthly_financials.py "${ARGS[@]}"

      - name: Remove runner IP from firewall
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "$AZ_SUBSCRIPTION" || true
          az sql server firewall-rule delete \
            --resource-group "$AZ_RG" \
            --server "$AZ_SQL_NAME" \
            --name "$FW_RULE_NAME" || true
